namespace BuildDateTimeGenerator
{
  using System;
  using System.Text;

  using Microsoft.CodeAnalysis;
  using Microsoft.CodeAnalysis.Text;

  [Generator( LanguageNames.CSharp )]
  public class BuildDateTimeGenerator : ISourceGenerator
  {
    public void Execute ( GeneratorExecutionContext context )
    {
      DateTimeOffset now = DateTimeOffset.Now;
      const string propertyComment = $"/// Gets <see cref=\"DateTimeOffset\"/>, which is set to the date and time the project was built. Since its value varies from build to build, the <see cref=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/code-generation#deterministic\">Deterministic</see> option will be violated.";
      string propertyDeclaration = $"public static System.DateTimeOffset BuildDateTime {{ get; }} = new( {now.Ticks}, new System.TimeSpan({now.Offset.Ticks}) ); // {now:R}";
      string source;

      IMethodSymbol entryPoint = context.Compilation.GetEntryPoint( context.CancellationToken );
      if ( entryPoint == null )
      {
        if ( !context.AnalyzerConfigOptions.GlobalOptions.TryGetValue( "build_property.RootNamespace", out var rootNamespace ) )
        {
          context.ReportDiagnostic( Diagnostic.Create( new DiagnosticDescriptor( "BD0000", "Missing default namespace.", $"GetEntryPoint returns null and default namespace cannot be found.", "BuildDateTimeGenerator", DiagnosticSeverity.Error, true ), null, messageArgs: null ) );
          return;
        }

        source =
$@"
namespace {rootNamespace}
{{
  /// <summary>
  /// Contains <see cref=""BuildDateTime""/>.
  /// </summary>
  internal static class BuildDateTimeClass
  {{
    /// <summary>
    {propertyComment}
    /// </summary>
    {propertyDeclaration}
  }}
}}
";
      }
      else
      {
        source = string.IsNullOrEmpty( entryPoint.ContainingNamespace.Name ) ?
$@"
public static partial class Program
{{
  /// <summary>
  {propertyComment}
  /// </summary>
  {propertyDeclaration}
}}
"
:
$@"
namespace {entryPoint.ContainingNamespace.Name}
{{
  {( entryPoint.ContainingType.DeclaredAccessibility == Accessibility.NotApplicable ? "" : entryPoint.ContainingType.DeclaredAccessibility.ToString().ToLower() )} {( entryPoint.ContainingType.IsStatic ? "static " : "" )}partial {entryPoint.ContainingType.TypeKind.ToString().ToLower()} {entryPoint.ContainingType.Name}
  {{
    /// <summary>
    {propertyComment}
    /// </summary>
    {propertyDeclaration}
  }}
}}
";
      }

      context.AddSource( "BuildDateTime.g.cs", SourceText.From( "// This file was generated by BuildDateTimeGenerator" + source, Encoding.UTF8 ) );
    }

    public void Initialize ( GeneratorInitializationContext context )
    { }
  }
}